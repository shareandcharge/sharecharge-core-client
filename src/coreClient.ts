import { ShareCharge, Wallet } from "@motionwerk/sharecharge-lib";
import { IConfig } from "@motionwerk/sharecharge-common";
import "reflect-metadata";
import { Container, injectable, inject } from "inversify";
import LoggingProvider from "./services/loggingProvider";
import IBridge from "./interfaces/iBridge";
import { Symbols } from "./symbols"
import ConfigProvider from "./services/configProvider";
import ShareChargeProvider from "./services/shareChargeProvider";
import BridgeProvider from "./services/bridgeProvider";
import WalletProvider from "./services/walletProvider";

@injectable()
export class CoreClient {

    private static container: Container;
    private scIds: string[];

    constructor(@inject(Symbols.ConfigProvider) private configProvider: ConfigProvider,
                @inject(Symbols.BridgeProvider) private bridgeProvider: BridgeProvider,
                @inject(Symbols.ShareChargeProvider) private shareChargeProvider: ShareChargeProvider,
                @inject(Symbols.WalletProvider) private walletProvider: WalletProvider,
                @inject(Symbols.LoggingProvider) private loggingProvider: LoggingProvider) {
        this.scIds = [];
    }

    get sc(): ShareCharge {
        return this.shareChargeProvider.obtain(this.configProvider);
    }

    get bridge(): IBridge {
        return this.bridgeProvider.obtain();
    }

    get wallet(): Wallet {
        return this.walletProvider.obtain();
    }

    get logger() {
        return this.loggingProvider.obtain();
    }

    get config(): IConfig {
        return this.configProvider;
    }

    private async getIds(): Promise<void> {
        this.scIds = await this.sc.store.getIdsByCPO(this.wallet.keychain[0].address)
    }

    private pollIds(interval: number = 5000): void {
        setInterval(async () => await this.getIds(), interval);
    }

    private listen() {

        this.sc.on("StartRequested", async (result) => {
            this.logger.debug(`Start requested on ${result.evseId}`);

            if (this.scIds.includes(result.scId)) {
                try {
                    await this.bridge.start(result);
                    const sessionId = '0x01'; // hardcoded for now but should come from bridge / be generated by lib
                    await this.sc.charging.useWallet(this.wallet).confirmStart(result.scId, result.evseId, sessionId);
                    this.logger.info(`Confirmed ${result.evseId} start`);
                } catch (err) {
                    this.logger.error(`Error starting ${result.evseId}: ${err.message}`);
                    await this.sc.charging.useWallet(this.wallet).error(result.scId, result.evseId, 0);
                }
            }
        });

        this.sc.on("StopRequested", async (result) => {
            this.logger.debug(`Stop requested for evse with uid: ${result.scId}`);

            if (this.scIds.includes(result.scId)) {
                try {
                    await this.bridge.stop(result);
                    const cdr = await this.bridge.cdr(result);
                    await this.sc.charging.useWallet(this.wallet).confirmStop(result.scId, result.evseId);
                    this.logger.info(`Confirmed ${result.evseId} stop`);
                    await this.sc.charging.useWallet(this.wallet).chargeDetailRecord(result.scId, result.evseId, cdr.price);
                    this.logger.info(`Confirmed ${result.evseId} CDR`);
                } catch (err) {
                    this.logger.error(`Error stopping ${result.evseId}: ${err.message}`);
                    await this.sc.charging.useWallet(this.wallet).error(result.scId, result.evseId, 1);
                }
            }
        });

        this.bridge.autoStop$.subscribe(async (result) => {
            const cdr = await this.bridge.cdr();
            await this.sc.charging.useWallet(this.wallet).confirmStop(result.scId, result.evseId);
            this.logger.info(`Confirmed ${result.evseId} autostop`);
            await this.sc.charging.useWallet(this.wallet).chargeDetailRecord(result.scId, result.evseId, cdr.price);
            this.logger.info(`Confirmed ${result.evseId} CDR`);
        });

        this.sc.startListening();
        this.logger.info(`Connected to bridge: ${this.bridge.name}`);
        this.logger.info(`Listening for events`);
        this.logger.debug(`Listening for these IDs: ${JSON.stringify(this.scIds)}`);
    }

    public run() {
        this.getIds().then(() => {
            this.pollIds();
            this.listen();
        });
    }

    static getInstance(): CoreClient {

        if (!CoreClient.container) {
            const container = new Container();
            container.bind<ConfigProvider>(Symbols.ConfigProvider).to(ConfigProvider).inSingletonScope();
            container.bind<ShareChargeProvider>(Symbols.ShareChargeProvider).to(ShareChargeProvider).inSingletonScope();
            container.bind<LoggingProvider>(Symbols.LoggingProvider).to(LoggingProvider).inSingletonScope();
            container.bind<BridgeProvider>(Symbols.BridgeProvider).to(BridgeProvider).inSingletonScope();
            container.bind<WalletProvider>(Symbols.WalletProvider).to(WalletProvider).inSingletonScope();
            CoreClient.container = container;
        }

        return CoreClient.container.resolve(CoreClient);
    }

    static rebind(symb, obj) {

        if (!CoreClient.container) {
            CoreClient.getInstance();
        }

        CoreClient.container.rebind(symb).to(obj).inSingletonScope();
    }
}